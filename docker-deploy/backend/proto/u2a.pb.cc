// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: u2a.proto

#include "u2a.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace u2a {
constexpr world_info::world_info(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : worldid_(PROTOBUF_LONGLONG(0)){}
struct world_infoDefaultTypeInternal {
  constexpr world_infoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~world_infoDefaultTypeInternal() {}
  union {
    world_info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT world_infoDefaultTypeInternal _world_info_default_instance_;
constexpr truck_arrived::truck_arrived(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shipid_(PROTOBUF_LONGLONG(0))
  , truckid_(0){}
struct truck_arrivedDefaultTypeInternal {
  constexpr truck_arrivedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~truck_arrivedDefaultTypeInternal() {}
  union {
    truck_arrived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT truck_arrivedDefaultTypeInternal _truck_arrived_default_instance_;
constexpr deliver_started::deliver_started(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shipid_(PROTOBUF_LONGLONG(0))
  , status_(false){}
struct deliver_startedDefaultTypeInternal {
  constexpr deliver_startedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~deliver_startedDefaultTypeInternal() {}
  union {
    deliver_started _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT deliver_startedDefaultTypeInternal _deliver_started_default_instance_;
constexpr delivered::delivered(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shipid_(PROTOBUF_LONGLONG(0)){}
struct deliveredDefaultTypeInternal {
  constexpr deliveredDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~deliveredDefaultTypeInternal() {}
  union {
    delivered _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT deliveredDefaultTypeInternal _delivered_default_instance_;
constexpr UToA::UToA(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : worldinfo_(nullptr)
  , truckarrived_(nullptr)
  , deliverstarted_(nullptr)
  , delivered_(nullptr){}
struct UToADefaultTypeInternal {
  constexpr UToADefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UToADefaultTypeInternal() {}
  union {
    UToA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UToADefaultTypeInternal _UToA_default_instance_;
}  // namespace u2a
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_u2a_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_u2a_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_u2a_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_u2a_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::u2a::world_info, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::u2a::world_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::u2a::world_info, worldid_),
  0,
  PROTOBUF_FIELD_OFFSET(::u2a::truck_arrived, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::u2a::truck_arrived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::u2a::truck_arrived, shipid_),
  PROTOBUF_FIELD_OFFSET(::u2a::truck_arrived, truckid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::u2a::deliver_started, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::u2a::deliver_started, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::u2a::deliver_started, status_),
  PROTOBUF_FIELD_OFFSET(::u2a::deliver_started, shipid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::u2a::delivered, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::u2a::delivered, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::u2a::delivered, shipid_),
  0,
  PROTOBUF_FIELD_OFFSET(::u2a::UToA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::u2a::UToA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::u2a::UToA, worldinfo_),
  PROTOBUF_FIELD_OFFSET(::u2a::UToA, truckarrived_),
  PROTOBUF_FIELD_OFFSET(::u2a::UToA, deliverstarted_),
  PROTOBUF_FIELD_OFFSET(::u2a::UToA, delivered_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::u2a::world_info)},
  { 7, 14, sizeof(::u2a::truck_arrived)},
  { 16, 23, sizeof(::u2a::deliver_started)},
  { 25, 31, sizeof(::u2a::delivered)},
  { 32, 41, sizeof(::u2a::UToA)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::u2a::_world_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::u2a::_truck_arrived_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::u2a::_deliver_started_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::u2a::_delivered_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::u2a::_UToA_default_instance_),
};

const char descriptor_table_protodef_u2a_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tu2a.proto\022\003u2a\"\035\n\nworld_info\022\017\n\007worldi"
  "d\030\001 \002(\003\"0\n\rtruck_arrived\022\016\n\006shipid\030\001 \002(\003"
  "\022\017\n\007truckid\030\002 \002(\005\"1\n\017deliver_started\022\016\n\006"
  "status\030\001 \002(\010\022\016\n\006shipid\030\002 \002(\003\"\033\n\tdelivere"
  "d\022\016\n\006shipid\030\001 \002(\003\"\245\001\n\004UToA\022\"\n\tworldInfo\030"
  "\001 \001(\0132\017.u2a.world_info\022(\n\014truckArrived\030\002"
  " \001(\0132\022.u2a.truck_arrived\022,\n\016deliverStart"
  "ed\030\003 \001(\0132\024.u2a.deliver_started\022!\n\tdelive"
  "red\030\004 \001(\0132\016.u2a.deliveredB9\n\020com.final.p"
  "rotosB\003u2aP\001Z\036github.com/protocolbuffers"
  "/u2a"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_u2a_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_u2a_2eproto = {
  false, false, 404, descriptor_table_protodef_u2a_2eproto, "u2a.proto", 
  &descriptor_table_u2a_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_u2a_2eproto::offsets,
  file_level_metadata_u2a_2eproto, file_level_enum_descriptors_u2a_2eproto, file_level_service_descriptors_u2a_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_u2a_2eproto_getter() {
  return &descriptor_table_u2a_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_u2a_2eproto(&descriptor_table_u2a_2eproto);
namespace u2a {

// ===================================================================

class world_info::_Internal {
 public:
  using HasBits = decltype(std::declval<world_info>()._has_bits_);
  static void set_has_worldid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

world_info::world_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:u2a.world_info)
}
world_info::world_info(const world_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  worldid_ = from.worldid_;
  // @@protoc_insertion_point(copy_constructor:u2a.world_info)
}

void world_info::SharedCtor() {
worldid_ = PROTOBUF_LONGLONG(0);
}

world_info::~world_info() {
  // @@protoc_insertion_point(destructor:u2a.world_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void world_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void world_info::ArenaDtor(void* object) {
  world_info* _this = reinterpret_cast< world_info* >(object);
  (void)_this;
}
void world_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void world_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void world_info::Clear() {
// @@protoc_insertion_point(message_clear_start:u2a.world_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worldid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* world_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 worldid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_worldid(&has_bits);
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* world_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:u2a.world_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 worldid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_worldid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:u2a.world_info)
  return target;
}

size_t world_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:u2a.world_info)
  size_t total_size = 0;

  // required int64 worldid = 1;
  if (_internal_has_worldid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_worldid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void world_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:u2a.world_info)
  GOOGLE_DCHECK_NE(&from, this);
  const world_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<world_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:u2a.world_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:u2a.world_info)
    MergeFrom(*source);
  }
}

void world_info::MergeFrom(const world_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:u2a.world_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_worldid()) {
    _internal_set_worldid(from._internal_worldid());
  }
}

void world_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:u2a.world_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void world_info::CopyFrom(const world_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:u2a.world_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool world_info::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void world_info::InternalSwap(world_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(worldid_, other->worldid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata world_info::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_u2a_2eproto_getter, &descriptor_table_u2a_2eproto_once,
      file_level_metadata_u2a_2eproto[0]);
}

// ===================================================================

class truck_arrived::_Internal {
 public:
  using HasBits = decltype(std::declval<truck_arrived>()._has_bits_);
  static void set_has_shipid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_truckid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

truck_arrived::truck_arrived(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:u2a.truck_arrived)
}
truck_arrived::truck_arrived(const truck_arrived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&shipid_, &from.shipid_,
    static_cast<size_t>(reinterpret_cast<char*>(&truckid_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(truckid_));
  // @@protoc_insertion_point(copy_constructor:u2a.truck_arrived)
}

void truck_arrived::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shipid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&truckid_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(truckid_));
}

truck_arrived::~truck_arrived() {
  // @@protoc_insertion_point(destructor:u2a.truck_arrived)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void truck_arrived::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void truck_arrived::ArenaDtor(void* object) {
  truck_arrived* _this = reinterpret_cast< truck_arrived* >(object);
  (void)_this;
}
void truck_arrived::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void truck_arrived::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void truck_arrived::Clear() {
// @@protoc_insertion_point(message_clear_start:u2a.truck_arrived)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&shipid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&truckid_) -
        reinterpret_cast<char*>(&shipid_)) + sizeof(truckid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* truck_arrived::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 shipid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_shipid(&has_bits);
          shipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 truckid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_truckid(&has_bits);
          truckid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* truck_arrived::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:u2a.truck_arrived)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 shipid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_shipid(), target);
  }

  // required int32 truckid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_truckid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:u2a.truck_arrived)
  return target;
}

size_t truck_arrived::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:u2a.truck_arrived)
  size_t total_size = 0;

  if (_internal_has_shipid()) {
    // required int64 shipid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());
  }

  if (_internal_has_truckid()) {
    // required int32 truckid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_truckid());
  }

  return total_size;
}
size_t truck_arrived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:u2a.truck_arrived)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 shipid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());

    // required int32 truckid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_truckid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void truck_arrived::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:u2a.truck_arrived)
  GOOGLE_DCHECK_NE(&from, this);
  const truck_arrived* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<truck_arrived>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:u2a.truck_arrived)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:u2a.truck_arrived)
    MergeFrom(*source);
  }
}

void truck_arrived::MergeFrom(const truck_arrived& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:u2a.truck_arrived)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      shipid_ = from.shipid_;
    }
    if (cached_has_bits & 0x00000002u) {
      truckid_ = from.truckid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void truck_arrived::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:u2a.truck_arrived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void truck_arrived::CopyFrom(const truck_arrived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:u2a.truck_arrived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool truck_arrived::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void truck_arrived::InternalSwap(truck_arrived* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(truck_arrived, truckid_)
      + sizeof(truck_arrived::truckid_)
      - PROTOBUF_FIELD_OFFSET(truck_arrived, shipid_)>(
          reinterpret_cast<char*>(&shipid_),
          reinterpret_cast<char*>(&other->shipid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata truck_arrived::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_u2a_2eproto_getter, &descriptor_table_u2a_2eproto_once,
      file_level_metadata_u2a_2eproto[1]);
}

// ===================================================================

class deliver_started::_Internal {
 public:
  using HasBits = decltype(std::declval<deliver_started>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_shipid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

deliver_started::deliver_started(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:u2a.deliver_started)
}
deliver_started::deliver_started(const deliver_started& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&shipid_, &from.shipid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:u2a.deliver_started)
}

void deliver_started::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shipid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(status_));
}

deliver_started::~deliver_started() {
  // @@protoc_insertion_point(destructor:u2a.deliver_started)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void deliver_started::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void deliver_started::ArenaDtor(void* object) {
  deliver_started* _this = reinterpret_cast< deliver_started* >(object);
  (void)_this;
}
void deliver_started::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void deliver_started::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void deliver_started::Clear() {
// @@protoc_insertion_point(message_clear_start:u2a.deliver_started)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&shipid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&shipid_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* deliver_started::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 shipid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_shipid(&has_bits);
          shipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* deliver_started::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:u2a.deliver_started)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // required int64 shipid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_shipid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:u2a.deliver_started)
  return target;
}

size_t deliver_started::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:u2a.deliver_started)
  size_t total_size = 0;

  if (_internal_has_shipid()) {
    // required int64 shipid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());
  }

  if (_internal_has_status()) {
    // required bool status = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t deliver_started::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:u2a.deliver_started)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 shipid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());

    // required bool status = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void deliver_started::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:u2a.deliver_started)
  GOOGLE_DCHECK_NE(&from, this);
  const deliver_started* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<deliver_started>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:u2a.deliver_started)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:u2a.deliver_started)
    MergeFrom(*source);
  }
}

void deliver_started::MergeFrom(const deliver_started& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:u2a.deliver_started)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      shipid_ = from.shipid_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void deliver_started::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:u2a.deliver_started)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void deliver_started::CopyFrom(const deliver_started& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:u2a.deliver_started)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deliver_started::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void deliver_started::InternalSwap(deliver_started* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(deliver_started, status_)
      + sizeof(deliver_started::status_)
      - PROTOBUF_FIELD_OFFSET(deliver_started, shipid_)>(
          reinterpret_cast<char*>(&shipid_),
          reinterpret_cast<char*>(&other->shipid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata deliver_started::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_u2a_2eproto_getter, &descriptor_table_u2a_2eproto_once,
      file_level_metadata_u2a_2eproto[2]);
}

// ===================================================================

class delivered::_Internal {
 public:
  using HasBits = decltype(std::declval<delivered>()._has_bits_);
  static void set_has_shipid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

delivered::delivered(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:u2a.delivered)
}
delivered::delivered(const delivered& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shipid_ = from.shipid_;
  // @@protoc_insertion_point(copy_constructor:u2a.delivered)
}

void delivered::SharedCtor() {
shipid_ = PROTOBUF_LONGLONG(0);
}

delivered::~delivered() {
  // @@protoc_insertion_point(destructor:u2a.delivered)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void delivered::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void delivered::ArenaDtor(void* object) {
  delivered* _this = reinterpret_cast< delivered* >(object);
  (void)_this;
}
void delivered::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void delivered::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void delivered::Clear() {
// @@protoc_insertion_point(message_clear_start:u2a.delivered)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shipid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* delivered::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 shipid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_shipid(&has_bits);
          shipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* delivered::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:u2a.delivered)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 shipid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_shipid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:u2a.delivered)
  return target;
}

size_t delivered::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:u2a.delivered)
  size_t total_size = 0;

  // required int64 shipid = 1;
  if (_internal_has_shipid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void delivered::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:u2a.delivered)
  GOOGLE_DCHECK_NE(&from, this);
  const delivered* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<delivered>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:u2a.delivered)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:u2a.delivered)
    MergeFrom(*source);
  }
}

void delivered::MergeFrom(const delivered& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:u2a.delivered)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shipid()) {
    _internal_set_shipid(from._internal_shipid());
  }
}

void delivered::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:u2a.delivered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void delivered::CopyFrom(const delivered& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:u2a.delivered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delivered::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void delivered::InternalSwap(delivered* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(shipid_, other->shipid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata delivered::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_u2a_2eproto_getter, &descriptor_table_u2a_2eproto_once,
      file_level_metadata_u2a_2eproto[3]);
}

// ===================================================================

class UToA::_Internal {
 public:
  using HasBits = decltype(std::declval<UToA>()._has_bits_);
  static const ::u2a::world_info& worldinfo(const UToA* msg);
  static void set_has_worldinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::u2a::truck_arrived& truckarrived(const UToA* msg);
  static void set_has_truckarrived(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::u2a::deliver_started& deliverstarted(const UToA* msg);
  static void set_has_deliverstarted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::u2a::delivered& delivered(const UToA* msg);
  static void set_has_delivered(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::u2a::world_info&
UToA::_Internal::worldinfo(const UToA* msg) {
  return *msg->worldinfo_;
}
const ::u2a::truck_arrived&
UToA::_Internal::truckarrived(const UToA* msg) {
  return *msg->truckarrived_;
}
const ::u2a::deliver_started&
UToA::_Internal::deliverstarted(const UToA* msg) {
  return *msg->deliverstarted_;
}
const ::u2a::delivered&
UToA::_Internal::delivered(const UToA* msg) {
  return *msg->delivered_;
}
UToA::UToA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:u2a.UToA)
}
UToA::UToA(const UToA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_worldinfo()) {
    worldinfo_ = new ::u2a::world_info(*from.worldinfo_);
  } else {
    worldinfo_ = nullptr;
  }
  if (from._internal_has_truckarrived()) {
    truckarrived_ = new ::u2a::truck_arrived(*from.truckarrived_);
  } else {
    truckarrived_ = nullptr;
  }
  if (from._internal_has_deliverstarted()) {
    deliverstarted_ = new ::u2a::deliver_started(*from.deliverstarted_);
  } else {
    deliverstarted_ = nullptr;
  }
  if (from._internal_has_delivered()) {
    delivered_ = new ::u2a::delivered(*from.delivered_);
  } else {
    delivered_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:u2a.UToA)
}

void UToA::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&worldinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delivered_) -
    reinterpret_cast<char*>(&worldinfo_)) + sizeof(delivered_));
}

UToA::~UToA() {
  // @@protoc_insertion_point(destructor:u2a.UToA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UToA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete worldinfo_;
  if (this != internal_default_instance()) delete truckarrived_;
  if (this != internal_default_instance()) delete deliverstarted_;
  if (this != internal_default_instance()) delete delivered_;
}

void UToA::ArenaDtor(void* object) {
  UToA* _this = reinterpret_cast< UToA* >(object);
  (void)_this;
}
void UToA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UToA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UToA::Clear() {
// @@protoc_insertion_point(message_clear_start:u2a.UToA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(worldinfo_ != nullptr);
      worldinfo_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(truckarrived_ != nullptr);
      truckarrived_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(deliverstarted_ != nullptr);
      deliverstarted_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(delivered_ != nullptr);
      delivered_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UToA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .u2a.world_info worldInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_worldinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .u2a.truck_arrived truckArrived = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_truckarrived(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .u2a.deliver_started deliverStarted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_deliverstarted(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .u2a.delivered delivered = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_delivered(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UToA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:u2a.UToA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .u2a.world_info worldInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::worldinfo(this), target, stream);
  }

  // optional .u2a.truck_arrived truckArrived = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::truckarrived(this), target, stream);
  }

  // optional .u2a.deliver_started deliverStarted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::deliverstarted(this), target, stream);
  }

  // optional .u2a.delivered delivered = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::delivered(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:u2a.UToA)
  return target;
}

size_t UToA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:u2a.UToA)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .u2a.world_info worldInfo = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *worldinfo_);
    }

    // optional .u2a.truck_arrived truckArrived = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *truckarrived_);
    }

    // optional .u2a.deliver_started deliverStarted = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *deliverstarted_);
    }

    // optional .u2a.delivered delivered = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *delivered_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UToA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:u2a.UToA)
  GOOGLE_DCHECK_NE(&from, this);
  const UToA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UToA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:u2a.UToA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:u2a.UToA)
    MergeFrom(*source);
  }
}

void UToA::MergeFrom(const UToA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:u2a.UToA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_worldinfo()->::u2a::world_info::MergeFrom(from._internal_worldinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_truckarrived()->::u2a::truck_arrived::MergeFrom(from._internal_truckarrived());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_deliverstarted()->::u2a::deliver_started::MergeFrom(from._internal_deliverstarted());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_delivered()->::u2a::delivered::MergeFrom(from._internal_delivered());
    }
  }
}

void UToA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:u2a.UToA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UToA::CopyFrom(const UToA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:u2a.UToA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UToA::IsInitialized() const {
  if (_internal_has_worldinfo()) {
    if (!worldinfo_->IsInitialized()) return false;
  }
  if (_internal_has_truckarrived()) {
    if (!truckarrived_->IsInitialized()) return false;
  }
  if (_internal_has_deliverstarted()) {
    if (!deliverstarted_->IsInitialized()) return false;
  }
  if (_internal_has_delivered()) {
    if (!delivered_->IsInitialized()) return false;
  }
  return true;
}

void UToA::InternalSwap(UToA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UToA, delivered_)
      + sizeof(UToA::delivered_)
      - PROTOBUF_FIELD_OFFSET(UToA, worldinfo_)>(
          reinterpret_cast<char*>(&worldinfo_),
          reinterpret_cast<char*>(&other->worldinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UToA::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_u2a_2eproto_getter, &descriptor_table_u2a_2eproto_once,
      file_level_metadata_u2a_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace u2a
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::u2a::world_info* Arena::CreateMaybeMessage< ::u2a::world_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::u2a::world_info >(arena);
}
template<> PROTOBUF_NOINLINE ::u2a::truck_arrived* Arena::CreateMaybeMessage< ::u2a::truck_arrived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::u2a::truck_arrived >(arena);
}
template<> PROTOBUF_NOINLINE ::u2a::deliver_started* Arena::CreateMaybeMessage< ::u2a::deliver_started >(Arena* arena) {
  return Arena::CreateMessageInternal< ::u2a::deliver_started >(arena);
}
template<> PROTOBUF_NOINLINE ::u2a::delivered* Arena::CreateMaybeMessage< ::u2a::delivered >(Arena* arena) {
  return Arena::CreateMessageInternal< ::u2a::delivered >(arena);
}
template<> PROTOBUF_NOINLINE ::u2a::UToA* Arena::CreateMaybeMessage< ::u2a::UToA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::u2a::UToA >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
