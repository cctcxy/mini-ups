// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: a2u.proto

#include "a2u.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace a2u {
constexpr world_info::world_info(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : worldid_(PROTOBUF_LONGLONG(0))
  , result_(false){}
struct world_infoDefaultTypeInternal {
  constexpr world_infoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~world_infoDefaultTypeInternal() {}
  union {
    world_info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT world_infoDefaultTypeInternal _world_info_default_instance_;
constexpr request_truck::request_truck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ups_account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , item_desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shipid_(PROTOBUF_LONGLONG(0))
  , whnum_(0)
  , location_x_(0)
  , location_y_(0){}
struct request_truckDefaultTypeInternal {
  constexpr request_truckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~request_truckDefaultTypeInternal() {}
  union {
    request_truck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT request_truckDefaultTypeInternal _request_truck_default_instance_;
constexpr ready_for_delivery::ready_for_delivery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shipid_(PROTOBUF_LONGLONG(0)){}
struct ready_for_deliveryDefaultTypeInternal {
  constexpr ready_for_deliveryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ready_for_deliveryDefaultTypeInternal() {}
  union {
    ready_for_delivery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ready_for_deliveryDefaultTypeInternal _ready_for_delivery_default_instance_;
constexpr change_destination::change_destination(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shipid_(PROTOBUF_LONGLONG(0))
  , location_x_(0)
  , location_y_(0){}
struct change_destinationDefaultTypeInternal {
  constexpr change_destinationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~change_destinationDefaultTypeInternal() {}
  union {
    change_destination _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT change_destinationDefaultTypeInternal _change_destination_default_instance_;
constexpr AToU::AToU(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : worldinfo_(nullptr)
  , request_(nullptr)
  , readyfordelivery_(nullptr)
  , changedest_(nullptr){}
struct AToUDefaultTypeInternal {
  constexpr AToUDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AToUDefaultTypeInternal() {}
  union {
    AToU _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AToUDefaultTypeInternal _AToU_default_instance_;
}  // namespace a2u
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_a2u_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_a2u_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_a2u_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_a2u_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::a2u::world_info, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::a2u::world_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::a2u::world_info, worldid_),
  PROTOBUF_FIELD_OFFSET(::a2u::world_info, result_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::a2u::request_truck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::a2u::request_truck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::a2u::request_truck, shipid_),
  PROTOBUF_FIELD_OFFSET(::a2u::request_truck, whnum_),
  PROTOBUF_FIELD_OFFSET(::a2u::request_truck, ups_account_id_),
  PROTOBUF_FIELD_OFFSET(::a2u::request_truck, location_x_),
  PROTOBUF_FIELD_OFFSET(::a2u::request_truck, location_y_),
  PROTOBUF_FIELD_OFFSET(::a2u::request_truck, item_desc_),
  2,
  3,
  0,
  4,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::a2u::ready_for_delivery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::a2u::ready_for_delivery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::a2u::ready_for_delivery, shipid_),
  0,
  PROTOBUF_FIELD_OFFSET(::a2u::change_destination, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::a2u::change_destination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::a2u::change_destination, shipid_),
  PROTOBUF_FIELD_OFFSET(::a2u::change_destination, location_x_),
  PROTOBUF_FIELD_OFFSET(::a2u::change_destination, location_y_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::a2u::AToU, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::a2u::AToU, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::a2u::AToU, worldinfo_),
  PROTOBUF_FIELD_OFFSET(::a2u::AToU, request_),
  PROTOBUF_FIELD_OFFSET(::a2u::AToU, readyfordelivery_),
  PROTOBUF_FIELD_OFFSET(::a2u::AToU, changedest_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::a2u::world_info)},
  { 9, 20, sizeof(::a2u::request_truck)},
  { 26, 32, sizeof(::a2u::ready_for_delivery)},
  { 33, 41, sizeof(::a2u::change_destination)},
  { 44, 53, sizeof(::a2u::AToU)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::a2u::_world_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::a2u::_request_truck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::a2u::_ready_for_delivery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::a2u::_change_destination_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::a2u::_AToU_default_instance_),
};

const char descriptor_table_protodef_a2u_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ta2u.proto\022\003a2u\"-\n\nworld_info\022\017\n\007worldi"
  "d\030\001 \002(\003\022\016\n\006result\030\002 \002(\010\"\201\001\n\rrequest_truc"
  "k\022\016\n\006shipid\030\001 \002(\003\022\r\n\005whnum\030\002 \002(\005\022\026\n\016ups_"
  "account_id\030\003 \001(\t\022\022\n\nlocation_x\030\004 \002(\005\022\022\n\n"
  "location_y\030\005 \002(\005\022\021\n\titem_desc\030\006 \002(\t\"$\n\022r"
  "eady_for_delivery\022\016\n\006shipid\030\001 \002(\003\"L\n\022cha"
  "nge_destination\022\016\n\006shipid\030\001 \002(\003\022\022\n\nlocat"
  "ion_x\030\002 \002(\005\022\022\n\nlocation_y\030\003 \002(\005\"\257\001\n\004AToU"
  "\022\"\n\tworldInfo\030\001 \001(\0132\017.a2u.world_info\022#\n\007"
  "request\030\002 \001(\0132\022.a2u.request_truck\0221\n\020rea"
  "dyForDelivery\030\003 \001(\0132\027.a2u.ready_for_deli"
  "very\022+\n\nchangeDest\030\004 \001(\0132\027.a2u.change_de"
  "stinationB9\n\020com.final.protosB\003a2uP\001Z\036gi"
  "thub.com/protocolbuffers/a2u"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_a2u_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_a2u_2eproto = {
  false, false, 548, descriptor_table_protodef_a2u_2eproto, "a2u.proto", 
  &descriptor_table_a2u_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_a2u_2eproto::offsets,
  file_level_metadata_a2u_2eproto, file_level_enum_descriptors_a2u_2eproto, file_level_service_descriptors_a2u_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_a2u_2eproto_getter() {
  return &descriptor_table_a2u_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_a2u_2eproto(&descriptor_table_a2u_2eproto);
namespace a2u {

// ===================================================================

class world_info::_Internal {
 public:
  using HasBits = decltype(std::declval<world_info>()._has_bits_);
  static void set_has_worldid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

world_info::world_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:a2u.world_info)
}
world_info::world_info(const world_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&worldid_, &from.worldid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&worldid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:a2u.world_info)
}

void world_info::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&worldid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&worldid_)) + sizeof(result_));
}

world_info::~world_info() {
  // @@protoc_insertion_point(destructor:a2u.world_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void world_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void world_info::ArenaDtor(void* object) {
  world_info* _this = reinterpret_cast< world_info* >(object);
  (void)_this;
}
void world_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void world_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void world_info::Clear() {
// @@protoc_insertion_point(message_clear_start:a2u.world_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&worldid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&worldid_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* world_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 worldid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_worldid(&has_bits);
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* world_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:a2u.world_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 worldid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_worldid(), target);
  }

  // required bool result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:a2u.world_info)
  return target;
}

size_t world_info::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:a2u.world_info)
  size_t total_size = 0;

  if (_internal_has_worldid()) {
    // required int64 worldid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_worldid());
  }

  if (_internal_has_result()) {
    // required bool result = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t world_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:a2u.world_info)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 worldid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_worldid());

    // required bool result = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void world_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:a2u.world_info)
  GOOGLE_DCHECK_NE(&from, this);
  const world_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<world_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:a2u.world_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:a2u.world_info)
    MergeFrom(*source);
  }
}

void world_info::MergeFrom(const world_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:a2u.world_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      worldid_ = from.worldid_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void world_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:a2u.world_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void world_info::CopyFrom(const world_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:a2u.world_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool world_info::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void world_info::InternalSwap(world_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(world_info, result_)
      + sizeof(world_info::result_)
      - PROTOBUF_FIELD_OFFSET(world_info, worldid_)>(
          reinterpret_cast<char*>(&worldid_),
          reinterpret_cast<char*>(&other->worldid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata world_info::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_a2u_2eproto_getter, &descriptor_table_a2u_2eproto_once,
      file_level_metadata_a2u_2eproto[0]);
}

// ===================================================================

class request_truck::_Internal {
 public:
  using HasBits = decltype(std::declval<request_truck>()._has_bits_);
  static void set_has_shipid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_whnum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ups_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_location_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_item_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003e) ^ 0x0000003e) != 0;
  }
};

request_truck::request_truck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:a2u.request_truck)
}
request_truck::request_truck(const request_truck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ups_account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ups_account_id()) {
    ups_account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ups_account_id(), 
      GetArena());
  }
  item_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_item_desc()) {
    item_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_item_desc(), 
      GetArena());
  }
  ::memcpy(&shipid_, &from.shipid_,
    static_cast<size_t>(reinterpret_cast<char*>(&location_y_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(location_y_));
  // @@protoc_insertion_point(copy_constructor:a2u.request_truck)
}

void request_truck::SharedCtor() {
ups_account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
item_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shipid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&location_y_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(location_y_));
}

request_truck::~request_truck() {
  // @@protoc_insertion_point(destructor:a2u.request_truck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void request_truck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ups_account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void request_truck::ArenaDtor(void* object) {
  request_truck* _this = reinterpret_cast< request_truck* >(object);
  (void)_this;
}
void request_truck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void request_truck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void request_truck::Clear() {
// @@protoc_insertion_point(message_clear_start:a2u.request_truck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ups_account_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      item_desc_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&shipid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&location_y_) -
        reinterpret_cast<char*>(&shipid_)) + sizeof(location_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* request_truck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 shipid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_shipid(&has_bits);
          shipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 whnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_whnum(&has_bits);
          whnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ups_account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ups_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "a2u.request_truck.ups_account_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 location_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_location_x(&has_bits);
          location_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 location_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_location_y(&has_bits);
          location_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string item_desc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_item_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "a2u.request_truck.item_desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* request_truck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:a2u.request_truck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 shipid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_shipid(), target);
  }

  // required int32 whnum = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_whnum(), target);
  }

  // optional string ups_account_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ups_account_id().data(), static_cast<int>(this->_internal_ups_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "a2u.request_truck.ups_account_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ups_account_id(), target);
  }

  // required int32 location_x = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_location_x(), target);
  }

  // required int32 location_y = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_location_y(), target);
  }

  // required string item_desc = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_item_desc().data(), static_cast<int>(this->_internal_item_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "a2u.request_truck.item_desc");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_item_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:a2u.request_truck)
  return target;
}

size_t request_truck::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:a2u.request_truck)
  size_t total_size = 0;

  if (_internal_has_item_desc()) {
    // required string item_desc = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item_desc());
  }

  if (_internal_has_shipid()) {
    // required int64 shipid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());
  }

  if (_internal_has_whnum()) {
    // required int32 whnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_whnum());
  }

  if (_internal_has_location_x()) {
    // required int32 location_x = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location_x());
  }

  if (_internal_has_location_y()) {
    // required int32 location_y = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location_y());
  }

  return total_size;
}
size_t request_truck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:a2u.request_truck)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003e) ^ 0x0000003e) == 0) {  // All required fields are present.
    // required string item_desc = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item_desc());

    // required int64 shipid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());

    // required int32 whnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_whnum());

    // required int32 location_x = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location_x());

    // required int32 location_y = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string ups_account_id = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ups_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void request_truck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:a2u.request_truck)
  GOOGLE_DCHECK_NE(&from, this);
  const request_truck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<request_truck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:a2u.request_truck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:a2u.request_truck)
    MergeFrom(*source);
  }
}

void request_truck::MergeFrom(const request_truck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:a2u.request_truck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ups_account_id(from._internal_ups_account_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_item_desc(from._internal_item_desc());
    }
    if (cached_has_bits & 0x00000004u) {
      shipid_ = from.shipid_;
    }
    if (cached_has_bits & 0x00000008u) {
      whnum_ = from.whnum_;
    }
    if (cached_has_bits & 0x00000010u) {
      location_x_ = from.location_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      location_y_ = from.location_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void request_truck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:a2u.request_truck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void request_truck::CopyFrom(const request_truck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:a2u.request_truck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool request_truck::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void request_truck::InternalSwap(request_truck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ups_account_id_.Swap(&other->ups_account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  item_desc_.Swap(&other->item_desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(request_truck, location_y_)
      + sizeof(request_truck::location_y_)
      - PROTOBUF_FIELD_OFFSET(request_truck, shipid_)>(
          reinterpret_cast<char*>(&shipid_),
          reinterpret_cast<char*>(&other->shipid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata request_truck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_a2u_2eproto_getter, &descriptor_table_a2u_2eproto_once,
      file_level_metadata_a2u_2eproto[1]);
}

// ===================================================================

class ready_for_delivery::_Internal {
 public:
  using HasBits = decltype(std::declval<ready_for_delivery>()._has_bits_);
  static void set_has_shipid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ready_for_delivery::ready_for_delivery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:a2u.ready_for_delivery)
}
ready_for_delivery::ready_for_delivery(const ready_for_delivery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shipid_ = from.shipid_;
  // @@protoc_insertion_point(copy_constructor:a2u.ready_for_delivery)
}

void ready_for_delivery::SharedCtor() {
shipid_ = PROTOBUF_LONGLONG(0);
}

ready_for_delivery::~ready_for_delivery() {
  // @@protoc_insertion_point(destructor:a2u.ready_for_delivery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ready_for_delivery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ready_for_delivery::ArenaDtor(void* object) {
  ready_for_delivery* _this = reinterpret_cast< ready_for_delivery* >(object);
  (void)_this;
}
void ready_for_delivery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ready_for_delivery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ready_for_delivery::Clear() {
// @@protoc_insertion_point(message_clear_start:a2u.ready_for_delivery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shipid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ready_for_delivery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 shipid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_shipid(&has_bits);
          shipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ready_for_delivery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:a2u.ready_for_delivery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 shipid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_shipid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:a2u.ready_for_delivery)
  return target;
}

size_t ready_for_delivery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:a2u.ready_for_delivery)
  size_t total_size = 0;

  // required int64 shipid = 1;
  if (_internal_has_shipid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ready_for_delivery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:a2u.ready_for_delivery)
  GOOGLE_DCHECK_NE(&from, this);
  const ready_for_delivery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ready_for_delivery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:a2u.ready_for_delivery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:a2u.ready_for_delivery)
    MergeFrom(*source);
  }
}

void ready_for_delivery::MergeFrom(const ready_for_delivery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:a2u.ready_for_delivery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shipid()) {
    _internal_set_shipid(from._internal_shipid());
  }
}

void ready_for_delivery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:a2u.ready_for_delivery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ready_for_delivery::CopyFrom(const ready_for_delivery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:a2u.ready_for_delivery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ready_for_delivery::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ready_for_delivery::InternalSwap(ready_for_delivery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(shipid_, other->shipid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ready_for_delivery::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_a2u_2eproto_getter, &descriptor_table_a2u_2eproto_once,
      file_level_metadata_a2u_2eproto[2]);
}

// ===================================================================

class change_destination::_Internal {
 public:
  using HasBits = decltype(std::declval<change_destination>()._has_bits_);
  static void set_has_shipid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_location_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

change_destination::change_destination(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:a2u.change_destination)
}
change_destination::change_destination(const change_destination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&shipid_, &from.shipid_,
    static_cast<size_t>(reinterpret_cast<char*>(&location_y_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(location_y_));
  // @@protoc_insertion_point(copy_constructor:a2u.change_destination)
}

void change_destination::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shipid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&location_y_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(location_y_));
}

change_destination::~change_destination() {
  // @@protoc_insertion_point(destructor:a2u.change_destination)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void change_destination::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void change_destination::ArenaDtor(void* object) {
  change_destination* _this = reinterpret_cast< change_destination* >(object);
  (void)_this;
}
void change_destination::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void change_destination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void change_destination::Clear() {
// @@protoc_insertion_point(message_clear_start:a2u.change_destination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&shipid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&location_y_) -
        reinterpret_cast<char*>(&shipid_)) + sizeof(location_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* change_destination::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 shipid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_shipid(&has_bits);
          shipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 location_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_location_x(&has_bits);
          location_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 location_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_location_y(&has_bits);
          location_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* change_destination::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:a2u.change_destination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 shipid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_shipid(), target);
  }

  // required int32 location_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_location_x(), target);
  }

  // required int32 location_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_location_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:a2u.change_destination)
  return target;
}

size_t change_destination::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:a2u.change_destination)
  size_t total_size = 0;

  if (_internal_has_shipid()) {
    // required int64 shipid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());
  }

  if (_internal_has_location_x()) {
    // required int32 location_x = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location_x());
  }

  if (_internal_has_location_y()) {
    // required int32 location_y = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location_y());
  }

  return total_size;
}
size_t change_destination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:a2u.change_destination)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 shipid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());

    // required int32 location_x = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location_x());

    // required int32 location_y = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void change_destination::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:a2u.change_destination)
  GOOGLE_DCHECK_NE(&from, this);
  const change_destination* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<change_destination>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:a2u.change_destination)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:a2u.change_destination)
    MergeFrom(*source);
  }
}

void change_destination::MergeFrom(const change_destination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:a2u.change_destination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      shipid_ = from.shipid_;
    }
    if (cached_has_bits & 0x00000002u) {
      location_x_ = from.location_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      location_y_ = from.location_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void change_destination::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:a2u.change_destination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void change_destination::CopyFrom(const change_destination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:a2u.change_destination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool change_destination::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void change_destination::InternalSwap(change_destination* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(change_destination, location_y_)
      + sizeof(change_destination::location_y_)
      - PROTOBUF_FIELD_OFFSET(change_destination, shipid_)>(
          reinterpret_cast<char*>(&shipid_),
          reinterpret_cast<char*>(&other->shipid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata change_destination::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_a2u_2eproto_getter, &descriptor_table_a2u_2eproto_once,
      file_level_metadata_a2u_2eproto[3]);
}

// ===================================================================

class AToU::_Internal {
 public:
  using HasBits = decltype(std::declval<AToU>()._has_bits_);
  static const ::a2u::world_info& worldinfo(const AToU* msg);
  static void set_has_worldinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::a2u::request_truck& request(const AToU* msg);
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::a2u::ready_for_delivery& readyfordelivery(const AToU* msg);
  static void set_has_readyfordelivery(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::a2u::change_destination& changedest(const AToU* msg);
  static void set_has_changedest(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::a2u::world_info&
AToU::_Internal::worldinfo(const AToU* msg) {
  return *msg->worldinfo_;
}
const ::a2u::request_truck&
AToU::_Internal::request(const AToU* msg) {
  return *msg->request_;
}
const ::a2u::ready_for_delivery&
AToU::_Internal::readyfordelivery(const AToU* msg) {
  return *msg->readyfordelivery_;
}
const ::a2u::change_destination&
AToU::_Internal::changedest(const AToU* msg) {
  return *msg->changedest_;
}
AToU::AToU(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:a2u.AToU)
}
AToU::AToU(const AToU& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_worldinfo()) {
    worldinfo_ = new ::a2u::world_info(*from.worldinfo_);
  } else {
    worldinfo_ = nullptr;
  }
  if (from._internal_has_request()) {
    request_ = new ::a2u::request_truck(*from.request_);
  } else {
    request_ = nullptr;
  }
  if (from._internal_has_readyfordelivery()) {
    readyfordelivery_ = new ::a2u::ready_for_delivery(*from.readyfordelivery_);
  } else {
    readyfordelivery_ = nullptr;
  }
  if (from._internal_has_changedest()) {
    changedest_ = new ::a2u::change_destination(*from.changedest_);
  } else {
    changedest_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:a2u.AToU)
}

void AToU::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&worldinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&changedest_) -
    reinterpret_cast<char*>(&worldinfo_)) + sizeof(changedest_));
}

AToU::~AToU() {
  // @@protoc_insertion_point(destructor:a2u.AToU)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AToU::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete worldinfo_;
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete readyfordelivery_;
  if (this != internal_default_instance()) delete changedest_;
}

void AToU::ArenaDtor(void* object) {
  AToU* _this = reinterpret_cast< AToU* >(object);
  (void)_this;
}
void AToU::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AToU::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AToU::Clear() {
// @@protoc_insertion_point(message_clear_start:a2u.AToU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(worldinfo_ != nullptr);
      worldinfo_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(request_ != nullptr);
      request_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(readyfordelivery_ != nullptr);
      readyfordelivery_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(changedest_ != nullptr);
      changedest_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AToU::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .a2u.world_info worldInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_worldinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .a2u.request_truck request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .a2u.ready_for_delivery readyForDelivery = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_readyfordelivery(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .a2u.change_destination changeDest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_changedest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AToU::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:a2u.AToU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .a2u.world_info worldInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::worldinfo(this), target, stream);
  }

  // optional .a2u.request_truck request = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::request(this), target, stream);
  }

  // optional .a2u.ready_for_delivery readyForDelivery = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::readyfordelivery(this), target, stream);
  }

  // optional .a2u.change_destination changeDest = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::changedest(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:a2u.AToU)
  return target;
}

size_t AToU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:a2u.AToU)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .a2u.world_info worldInfo = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *worldinfo_);
    }

    // optional .a2u.request_truck request = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_);
    }

    // optional .a2u.ready_for_delivery readyForDelivery = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *readyfordelivery_);
    }

    // optional .a2u.change_destination changeDest = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *changedest_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AToU::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:a2u.AToU)
  GOOGLE_DCHECK_NE(&from, this);
  const AToU* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AToU>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:a2u.AToU)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:a2u.AToU)
    MergeFrom(*source);
  }
}

void AToU::MergeFrom(const AToU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:a2u.AToU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_worldinfo()->::a2u::world_info::MergeFrom(from._internal_worldinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_request()->::a2u::request_truck::MergeFrom(from._internal_request());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_readyfordelivery()->::a2u::ready_for_delivery::MergeFrom(from._internal_readyfordelivery());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_changedest()->::a2u::change_destination::MergeFrom(from._internal_changedest());
    }
  }
}

void AToU::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:a2u.AToU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AToU::CopyFrom(const AToU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:a2u.AToU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AToU::IsInitialized() const {
  if (_internal_has_worldinfo()) {
    if (!worldinfo_->IsInitialized()) return false;
  }
  if (_internal_has_request()) {
    if (!request_->IsInitialized()) return false;
  }
  if (_internal_has_readyfordelivery()) {
    if (!readyfordelivery_->IsInitialized()) return false;
  }
  if (_internal_has_changedest()) {
    if (!changedest_->IsInitialized()) return false;
  }
  return true;
}

void AToU::InternalSwap(AToU* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AToU, changedest_)
      + sizeof(AToU::changedest_)
      - PROTOBUF_FIELD_OFFSET(AToU, worldinfo_)>(
          reinterpret_cast<char*>(&worldinfo_),
          reinterpret_cast<char*>(&other->worldinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AToU::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_a2u_2eproto_getter, &descriptor_table_a2u_2eproto_once,
      file_level_metadata_a2u_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace a2u
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::a2u::world_info* Arena::CreateMaybeMessage< ::a2u::world_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::a2u::world_info >(arena);
}
template<> PROTOBUF_NOINLINE ::a2u::request_truck* Arena::CreateMaybeMessage< ::a2u::request_truck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::a2u::request_truck >(arena);
}
template<> PROTOBUF_NOINLINE ::a2u::ready_for_delivery* Arena::CreateMaybeMessage< ::a2u::ready_for_delivery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::a2u::ready_for_delivery >(arena);
}
template<> PROTOBUF_NOINLINE ::a2u::change_destination* Arena::CreateMaybeMessage< ::a2u::change_destination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::a2u::change_destination >(arena);
}
template<> PROTOBUF_NOINLINE ::a2u::AToU* Arena::CreateMaybeMessage< ::a2u::AToU >(Arena* arena) {
  return Arena::CreateMessageInternal< ::a2u::AToU >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
